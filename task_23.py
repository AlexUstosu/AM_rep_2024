#Р-09 (демо- 2021). Исполнитель преобразует число на экране. У исполнителя есть две команды, которым присвоены номера:
# 1. Прибавить 1
# 2. Умножить на 2
# Первая команда увеличивает число на экране на 1, вторая умножает его на 2.
# Программа для исполнителя – это последовательность команд. Сколько существует
# программ, для которых при исходном числе 1 результатом является число 20, и при этом траектория вычислений содержит
# число 10


# def f(start, x):
#     if start == x:
#         return 1
#     if start > x:
#         return 0
#     return f(start + 1, x) + f(start * 2, x)
#
# print(f(1,10)*f(10,20))
#
# # без числа 12
# def f(start, x, not_use):
#     if start == x:
#         return 1
#     if start > x:
#         return 0
#     if start != not_use:
#         return 0
#     return f(start + 1, x) + f(start * 2, x)
#
# print(f(1,10, 0)*f(10,20, 12))
#
# # без числа 12, 15, 16
# def f(start, x, not_use):
#     if start == x:
#         return 1
#     if start > x:
#         return 0
#     if start in not_use:
#         return 0
#     return f(start + 1, x) + f(start * 2, x)
#
# print(f(1,10, [0])*f(10,20, [12,13,14]))

#16)(Т.В. Белова) У исполнителя Калькулятор три команды, которым присвоены номера:
# 1. прибавь 1
# 2. умножь на 2
# 3. возведи в квадрат
# Сколько есть программ, которые число 2 преобразуют в число 38?

# def f(start, x):
#     if start == x:
#         return 1
#     if start > x:
#         return 0
#     return f(start + 1, x) + f(start * 2, x) + f(start ** 2, x)

# Р-01. У исполнителя Калькулятор две команды, которым присвоены номера:
# 1. прибавь 1
# 2. увеличь вторую с конца цифру на 1
# Первая из них увеличивает число на экране на 1, вторая – увеличивает на
# 1 число десятков. Если перед выполнением команды 2 вторая с конца цифра равна
# 9, она не изменяется. Программа для Калькулятора – это последовательность команд.
# Сколько есть программ, которые число 15 преобразуют в число 28?
#
# def f(start, x):
#     if start == x:
#         return 1
#     if start > x:
#         return 0
#     number = start
#     if number % 100 // 10 < 9:
#         number += 10
#     return f(start + 1, x) + f(number, x)
#
# print(f(15,28))


#Р-00. У исполнителя Калькулятор две команды, которым присвоены номера:
# 1. прибавь 1
# 2. увеличь две младшие цифры на 1
# Первая из них увеличивает число на экране на 1,
# вторая – увеличивает на 1 число десятков и число единиц.
# Если перед выполнением команды 2 какая-либо из двух младших цифр равна 9, она не изменяется.
# Программа для Калькулятора – это последовательность команд.
# Сколько есть программ, которые число 23 преобразуют в число 48?
#
# def f(start, x):
#     if start == x:
#         return 1
#     if start > x:
#         return 0
#     number = start
#     if number % 100 // 10 < 9:
#         number += 10
#     return f(start + 1, x) + f(number, x)
#
# print(f(15,28))



#129)(Е. Джобс) Исполнитель ЛенивыйСчетовод преобразует число, записанное на экране. У исполнителя есть три команды, которым присвоены номера:
# 1. Прибавить 2
# 2. Прибавить 3
# 3. Дописать к числу справа 1
# Первая команда увеличивает число на 2, вторая – на 3, третья – приписывает
# к текущему значению цифру 1 (например, для 10 результатом выполнения данной команды будет 101).
# Сколько существует таких программ, которые исходное число 3 преобразуют в число 25, при этом траектория вычислений содержит число 12?

'''ГОТОВО'''

#134) (А. Комков) Исполнитель Нолик преобразует двоичное число, записанное на экране.
# У исполнителя есть две команды, которым присвоены номера:
# 1. Вычесть 1
# 2. Убрать последнюю цифру справа
# Первая команда уменьшает число на 1. Вторая команда убирает последнюю справа цифру, например,
# для числа 110 результатом работы данной команды будет являться число 11. Сколько существует программ,
# которые исходное двоичное число 110111 преобразуют в двоичное число 110?



def F(x):
    a = ''
    if x[-1:] == '1':
        a = x[: len(x) - 1] + '0'
    if x[-1:] == '0':
        index = 0
        for i in x[::-1]:
              if i == '0':
                  index += 1
            a = x[: len(x) - 2] + '0' + '1'
    return a

def f(x, y):
    if int(x, 2) < int(y, 2):
        return 0
    if x == y:
        return 1
    return f(F(x), y) + f(x[: len(x) - 1], y)
print (f('110111', '110'))


def f(start, x):
    if start == x:
        return 1
    if start < x:
        return 0
    return f(start - 1, x) + f(start // 2, x)



# 135)(А. Комков) Исполнитель Нолик преобразует двоичное число, записанное на экране.
# У исполнителя есть две команды, которым присвоены номера:
# 1. Прибавить 1
# 2. Добавить слева 1
# Первая команда увеличивает число на 1. Вторая команда приписывает к двоичному числу слева 1,
# например, для числа 10 результатом работы данной команды будет являться число 110.
# Сколько существует программ, которые исходное двоичное число 100 преобразуют в двоичное число 110001?


#161)(Б. Михлин) Исполнитель К22 преобразует число, записанное на экране. У исполнителя есть три команды, которым присвоены номера:
# 1. Прибавь 1
# 2. Прибавь 3
# 3. Получи число Фибоначчи по номеру
# Первая из них увеличивает число на экране на 1, вторая увеличивает число на 3.
# Третья команда получает число из ряда Фибоначчи c номером, равным числу на экране
# (например, для числа 6 будет получено 8, а для числа 7 будет получено 13).
# Программа для исполнителя – это последовательность команд. Сколько существует программ,
# которые преобразуют исходное число 6 в число 21?
# Примечание. Числа Фибоначчи – это ряд чисел, в котором первое и второе число равны
# единице, а каждое следующее число равно сумме двух предыдущих чисел ряда: 1, 1, 2, 3, 5, 8, 13, ...

#187)(А. Брейк) Лягушке нужно добраться до укрытия, избегая опасностей. У Лягушки есть три действия:
# 1. Короткий прыжок +2
# 2. Длинный прыжок +3
# 3. Избежать опасности 2n
# Первые два действия увеличивают позицию Лягушки на 2 и 3 соответственно.
# Третье действие можно применить только тогда, когда Лягушка находится в
# нечетной позиции — позиция N преобразуется в позицию 2N, позволяя
# Лягушке избежать опасности. Лягушка была замечена на расстоянии 3.
# Сколько существует различных путей Лягушки к укрытию в позиции 46, каждый их
# которых содержит не более двух действий «Избежать опасности»?



#204)(Е. Джобс) На экране есть два окна, в каждом из которых написано по числу. У исполнителя Сумматор есть две команды, которым присвоены номера:
# 1. запиши сумму чисел в первое окно
# 2. запиши сумму чисел во второе окно
# Выполняя первую из них, Сумматор складывает числа в окнах и заменяет этой
# суммой число в первом окне, а выполняя вторую, складывает числа и заменяет этой
# суммой число во втором окне. Сколько существует программ для Сумматора таких, что в
# результате его работы из пары чисел (1, 1) получится пара с суммой 88?

#218)(М. Ишимов) Исполнитель преобразует число на экране. У исполнителя есть три команды, которые обозначены латинскими буквами:
# A. Вычти 2
# B. Вычти минимальную ненулевую цифру числа
# C. Вычти остаток от деления на 4
# Выполняя первую из них, исполнитель уменьшает значение на экране на 2,
# выполняя вторую – уменьшает на минимальную ненулевую цифру числа, выполняя третью –
# уменьшает на остаток от деления числа на 4. Программа для исполнителя – это последовательность
# команд, каждая из которых уменьшает число. Сколько существует программ, для которых при
# исходном числе 96 результатом является число 60, и при этом траектория вычислений
# содержит число 64?  Траектория вычислений программы – это последовательность результатов
# выполнения всех команд программы. Например, для программы ABC при исходном числе 38 траектория
# будет состоять из чисел 36, 33, 32.


#318)(Д. Паршиков) Исполнитель Цепочка собирает последовательность из букв латинского алфавита, с помощью двух команд, которым присвоены номера:
# 1. Добавить следующую по алфавиту букву
# 2. Пропустить три буквы и добавить следующую по алфавиту
# Выполняя первую команду, исполнитель добавляет в конец цепочки букву,
# следующую в алфавите за последней буквой текущей цепочки; выполняя вторую –
# добавляет букву, стоящую в алфавите на четвёртом месте после последней буквы текущей цепочки.
# Программа для такого исполнителя — это последовательность команд. Например, программа 121
# преобразует «B» в «BCGH». Сколько существует программ из пяти команд, которые преобразуют
# исходную цепочку «A» в цепочку, оканчивающуюся буквой «O» и не содержащую букву «М»?
# Латинский алфавит: ABCDEFGHIJKLMNOPQRSTUVWXYZ.