# P-02 (демо-2023). Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит
# куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить
# в кучу один камень или увеличить количество камней в куче в два раза. Для того чтобы делать ходы,
# у каждого игрока есть неограниченное количество камней. Игра завершается в тот момент,
# когда количество камней в куче становится не менее 129. Победителем считается игрок,
# сделавший последний ход, т.е. первым получивший кучу, в которой будет 129 или больше камней.
# В начальный момент в куче было S камней, 1 ≤ S ≤ 128.


# Задание 19.
# Укажите такое значение S, при котором Петя не может выиграть за один ход, но при любом ходе
# Пети Ваня может выиграть своим первым ходом.
#   ПВ - 2 хода
# Задание 20.
# Найдите два таких значения S, при которых у Пети есть выигрышная стратегия,
# причём одновременно выполняются два условия:
# ПВП - 3
# − Петя не может выиграть за один ход;
# − Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.
# Найденные значения запишите в ответе в порядке возрастания.
# Задание 21
# Найдите значение S, при котором одновременно выполняются два условия:
# ПВ - 2 хода или ПВПВ - 4 хода
# – у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;
# – у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.


# def strategy(s, m):      #s - количество камней кучи / m - количество ходов
#     if s >= 129:
#         return m % 2 == 0
#     if m == 0:
#         return 0
#     if m % 2 != 0:
#         return strategy(s + 1, m - 1) or strategy(s * 2, m - 1)         # первый
#     else:
#         return strategy(s + 1, m - 1) and strategy(s * 2, m - 1)         # второй
#
# print('19: ', [s for s in range(1, 129) if strategy(s,2)] )
# print('20: ', [s for s in range(1, 129) if not strategy(s, 1) and strategy(s,3)] )
# print('21: ', [s for s in range(1, 129) if not strategy(s, 2) and strategy(s,4)] )






#P-00 (демо-2021). Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней.
# Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в одну из куч (по своему выбору)
# один камень или увеличить количество камней в куче в два раза. Игра завершается в тот момент,
# когда суммарное количество камней в кучах становится не менее 77. Победителем считается игрок,
# сделавший последний ход, т.е. первым получивший такую позицию, при которой в кучах будет 77 или больше камней.
# В начальный момент в первой куче было семь камней, во второй куче – S камней; 1 ≤ S ≤ 69.

# Задание 19.
# Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение S, когда такая ситуация возможна.

# Задание 20.
# Найдите два таких значения S, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:
# − Петя не может выиграть за один ход;
# − Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.
# Найденные значения запишите в ответе в порядке возрастания.

# Задание 21
# Найдите минимальное значение S, при котором одновременно выполняются два условия:
# – у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;
# – у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.

def strategy(s_1, s_2, prev_n, n):      #s_1/s_2 - количество камней  / prev_n - совершенные ходы/ n - количество ходов
    if s_1 + s_2 >= 77:
        return prev_n % 2 == n % 2
    if prev_n == n:
        return 0

    variants = [
        strategy(s_1 + 1, s_2, prev_n + 1, n),
        strategy(s_1, s_2 + 1, prev_n + 1, n),
        strategy(s_1 * 2, s_2, prev_n + 1, n),
        strategy(s_1, s_2 * 2, prev_n + 1, n)
    ]
    return any(variants) if (prev_n + 1) % 2 == n % 2 \
        else all(variants)

print('19: ', [s for s in range(1, 70) if strategy(7, s,0, 2)])
print('20: ', [s for s in range(1, 70) if not strategy(7, s,0, 1) and strategy(7, s,0, 3) ] )
print('21: ', [s for s in range(1, 70) if not strategy(7, s,0, 2)  and strategy(7, s,0, 4) ] )



# 7 + S * 2 *2 >= 77

def f( a, b, prevMoves, moveWin ):
    if a + b >= 77:
      return prevMoves % 2 == moveWin % 2       # 1
    if prevMoves == moveWin: return 0           # 2
    h = [ f(a+1, b, prevMoves+1, moveWin),      # 3
          f(a, b+1, prevMoves+1, moveWin),
          f(a*2, b, prevMoves+1, moveWin),
          f(a, b*2, prevMoves+1, moveWin)]
    return any(h) if (prevMoves+1) % 2 == moveWin % 2 else all(h)
print('19)', [s for s in range(1,70) if f(7,s,0,2)])
print('20)', *[s for s in range(1,70)
                 if not f(7,s,0,1) and f(7,s,0,3)])
print('21)', min(s for s in range(1,70)
                   if not f(7,s,0,2) and f(7,s,0,4)))