#14)	(М. Ишимов) Исполнитель Черепаха действует на плоскости с
# декартовой системой координат. В начальный момент Черепаха
# находится в начале координат, её голова направлена вдоль
# положительного направления оси ординат, хвост опущен.
# При опущенном хвосте Черепаха оставляет на поле след в виде линии.
# В каждый конкретный момент известно положение исполнителя и направление
# его движения. У исполнителя существует две команды:
# Вперёд n (где n – целое число), вызывающая передвижение Черепахи
# на n единиц в том направлении, куда указывает её голова, и Направо
# m (где m – целое число), вызывающая изменение направления движения
# а m градусов по часовой стрелке. Запись
# Повтори k [Команда1 Команда2 … КомандаS]
# означает, что последовательность из S команд
# повторится k раз. Черепахе был дан для исполнения следующий алгоритм:
# Повтори 11 [Вперёд 4 Направо 60]
# Определите, сколько точек с целочисленными
# положительными координатами будут находиться внутри
# области, ограниченной линией, заданной данным алгоритмом.
# Точки на линии учитывать не следует.

# import turtle as t
# from itertools import count
#
# t.left(90)
# t.pendown()
# m = 30
# t.speed(300)
# for i in range(11):
#     t.forward(4 * m)
#     t.right(60)
# count = 0
# t.penup()
# for x in range (1,8):
#     for y in range(1,7):
#         t.goto(x * m, y * m)
#         t.dot(4)
#         count += 1
#
#
# t.write(count)
# t.mainloop()



#76)	(А. Богданов) Исполнитель Черепаха действует на плоскости с д
# екартовой системой координат. В начальный момент Черепаха находится
# в начале координат, её голова направлена вдоль положительного направления
# оси абсцисс, хвост опущен. При опущенном хвосте Черепаха оставляет на
# поле след в виде линии. В каждый конкретный момент известно положение
# исполнителя и направление его движения. У исполнителя существует две команды:
# Вперёд n (где n – целое число), вызывающая передвижение Черепахи на n единиц в
# том направлении, куда указывает её голова, и Направо m (где m – целое число),
# вызывающая изменение направления движения на m градусов по часовой стрелке.
# Запись Повтори k [Команда1 Команда2 … КомандаS]
# означает, что последовательность из S команд повторится k раз.
# Черепахе был дан для исполнения следующий алгоритм:
# Повтори 4 [ Повтори 4 [ Повтори 4 [ Вперед 3 Направо 120 ] Вперед 3 ] Вперед 3 ]
# Сколько равносторонних треугольников можно найти на полученной фигуре?



# import turtle as t
# from itertools import count
#
# t.pendown()
# m = 30
# t.speed()
# t.tracer(2)
# for i in range(4):
#     for j in range(4):
#         for k in range(4):
#             t.forward(3 * m)
#             t.right(120)
#         t.forward(3 * m)
#     t.forward(3 * m)
#
# t.mainloop()



# #77
# import turtle as t
# from itertools import count
#
# t.pendown()
# m = 3
# t.speed()
# #t.tracer(2)
# for i in range(2):
#     t.forward(10 * m)
#     t.right(90)
#     t.forward(20 * m)
#     t.right(90)
#
# t.penup()
#
# t.forward(3 * m)
# t.right(90)
# t.forward(5 * m)
# t.left(90)
#
# t.pendown()
#
# for i in range(2):
#     t.forward(70 * m)
#     t.right(90)
#     t.forward(80 * m)
#     t.right(90)
#
# count = 0
# for x in range (3,11):
#     for y in range(-20,-4):
#         t.goto(x * m, y * m)
#         #t.dot(4)
#         count += 1
#
# t.write(count)
# t.mainloop()

#120
# import turtle as t
# from itertools import count
#
# t.pendown()
# t.speed()
# m = 10
# #t.tracer(2)
#
# x, y = 0, 0
# t.goto(x * m, y * m)
# t.dot(4)
#
# x += 0
# y += 12
# t.goto(x * m, y * m)
# t.dot(4)
#
# x += 5
# y += -12
# t.goto(x * m, y * m)
# t.dot(4)
#
# x += -10
# y += 0
# t.goto(x * m, y * m)
# t.dot(4)
#
# x += 5
# y += 12
# t.goto(x * m, y * m)
# t.dot(4)
#
# x += 0
# y += 4
# t.goto(x * m, y * m)
# t.dot(4)
#
# x += 3
# y += -4
# t.goto(x * m, y * m)
# t.dot(4)
#
# x += -6
# y += 0
# t.goto(x * m, y * m)
# t.dot(4)
#
# x += 3
# y += 4
# t.goto(x * m, y * m)
# t.dot(4)
#
# t.mainloop()


#135
import turtle as t
from itertools import count

t.pendown()

m = 30

t.speed()
#t.tracer(2)

count = 0

for x in range(0,2):
    count = 0
    for i in range(2):
        t.forward(3 * x * m)
        t.right(90)
        t.dot()

    t.forward(x * m)
    t.right(90)
    t.dot()

    t.forward(2 * x * m)
    t.left(90)
    t.dot()

    t.forward(2 * x * m)
    t.right(90)
    t.dot()

    t.forward(x * m)


s1 = 0
s2 = 0

for x in range(0,500):
    s1 =2*x*(x-1)
    s2 =(3*x-1)*(x-1)
    if s1 + s2 > 500000:
        print(f"{x} = {s1 + s2}")
        break

t.write(count)
t.mainloop()