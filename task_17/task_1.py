# Рассматривается множество целых чисел, принадлежащих числовому
# отрезку [1529; 9482], которые удовлетворяют следующим условиям:
# − запись в двоичной системе закачивается на 01;
# − запись в пятеричной системе заканчивается на 3.
# Найдите минимальное из таких чисел и их сумму.
# Гарантируется, что искомая сумма не превосходит 107.

#1533 2190194

# A = [i for i in range(1529,9483)]
# #print(A)
# B = list()
#
# for i in A:
#     number_bin = bin(i)[2:]
#     number_5 = ''
#     x = i
#     while i > 0:
#         number_5 += str(i % 5)
#         i //= 5
#     number_5 = number_5[::-1]
#
#     if number_bin[-2:] == '01' and number_5[-1:] == '3':
#         B.append(x)
# print(B)
# print(f'Min: {min(B)}')
# print(f'Sum: {sum(B)}')


#90)	(П. Волгин) Рассматривается множество целых чисел, принадлежащих числовому
# отрезку [12094; 20075], которые удовлетворяют следующим условиям:
# а) Число в шестнадцатеричной записи оканчивается цифрой «F»;
# б) Число делится на 3, но не делится на 8,14,19.
# Найдите сумму таких чисел и их количество. В ответе запишите сначала сумму,
# а потом количество.

# A = [i for i in range(12094,20076)]
# print(A)
# B = list()
#
# for i in A:
#     number_hex = hex(i)[2:]
#     if number_hex[-1:] == 'F':
#         #TODO

#111)	(П. Волгин) Рассматривается множество целых чисел, принадлежащих числовому
# отрезку [10; 6000], которые удовлетворяют следующим условиям:
#а) Запись числа в пятеричной системе счисления содержит только двойки.
#б) Число делится на 6.
#Найдите количество таких чисел и их сумму. В ответе запишите сначала
# количество, а затем сумму.


# A = [i for i in range(10,6001)]
# print(A)
# B = list()
#
# for i in A:
#     number_5 = ''
#     x = i
#     while x > 0:
#         number_5 += str(x % 5)
#         x //= 5
#     number_5 = number_5[::-1]
#     #print(number_5)
#     if len(number_5) == number_5.count('2') and i % 6 == 0:
#         B.append(i)
#
# print(B)
# print(f'Count: {len(B)}')
# print(f'Sum: {sum(B)}')



#113)	(П. Волгин) Рассматривается множество целых чисел, принадлежащих числовому
# отрезку [777; 19990], которые удовлетворяют следующим условиям:
#а) Максимальная цифра в восьмеричной записи числа равна 6 .
#б) Число делится на 11 или на 13, но не делится на 15.
#Найдите количество таких чисел и разность между максимальным и минимальным числами.
# В ответе запишите сначала количество, а затем разность между максимальным и
# минимальным числами.

# A = [i for i in range(777,19991)]
# print(A)
# B = list()
#
# for i in A:
#     number_8 = oct(i)[2:]
#
#     if number_8.count('6') > 0 and number_8.count('7') == 0 and number_8.count('8') == 0:
#         if (i % 11 == 0 or i % 13 == 0)  and i % 15 != 0:
#             B.append(i)
#
# #TODO

#118)	(П. Волгин) Рассматривается множество целых чисел, принадлежащих числовому
# отрезку [1717; 212121], которые удовлетворяют следующим условиям:
#а) Число в шестнадцатеричной записи оканчивается на A, но при этом не оканчивается на 0A.
#б) Число делится на D16.
#Найдите количество таких чисел и квадрат минимального из них.
# В ответе запишите сначала количество, а затем квадрат минимального числа.

# A = [i for i in range(1717,212121)]
# B = list()
#
# for i in A:
#     number_16 = hex(i)[2:]
#     if number_16[-1:] == 'a' and number_16[-2:] != '0a' and i % 13 == 0:
#         B.append(i)
#
# print(B)
# print(f'Count: {len(B)}')
# print(f'Min: {min(B)**2}')



#140)	(В. Шелудько) Рассматривается множество целых чисел, принадлежащих числовому отрезку
# [4413; 10153], которые делятся на 5 и 23 и не делятся на 7, 10 и при этом цифра в
# разряде десятков принадлежит отрезку [1; 3]. Найдите количество таких чисел и
# минимальное из них. В ответе запишите два целых числа: сначала количество,
# затем минимальное число.

# A = [i for i in range(4413,10154)]
# B = list()
#
# for i in A:
#     if i % 100 // 10 in [1, 2, 3]:
#         B.append(i)
#
# print(B)
# print(f'Count: {len(B)}')
# print(f'Min: {min(B)**2}')

# массив случайных чисел
# элеметов с нечетными индексами

import random

A = [(random.randint(1, 100)) for i in range(10)]
print(A)
for i in range(len(A) / 2):
    if i % 2 == 0:
        print(i)
        A.pop(i)
print(A)


# Правила работы с файлами
# 1 Всё что открыто должно быть закрыто
# 2 Соблюдать режим
# r - read
# w = write
# rb - read binary
# wb
# r+ - для чтения и записи
# rb+
# w+ - для чтения и записи
# a - appand
# a+
# 3 Путь
# Абсолютный путь -"C:\\Users\\Администратор\\Downloads\\ege5.doc"
# Относительный путь - с корня каталога "test.txt"


# escape \n enter \s - space  \t - tab  \"

#file = open('test.txt','r+')

# with open('test.txt','r+') as file:
#     a = file.read(9)

# 150)	(В. Шубинкин) В файле 17-1.txt содержится последовательность
# целых чисел. Элементы последовательности могут принимать целые
# значения от -10 000 до 10 000 включительно. Определите и запишите в
# ответе сначала количество пар элементов последовательности, в которых
# хотя бы одно число делится на 7, а другое при этом не делится на 17.
# Затем - минимальную из сумм элементов таких пар.
# В данной задаче под парой подразумевается два идущих подряд элемента
# последовательности. Например,
# для последовательности -45; 14; 22; -21; 34 ответом будет пара чисел:
# 3 и -31.
# A = list()
# A_summ = list()
# with open('17-1.txt','r') as file:
#     for line in file:
#         A.append(int(line))
#
# A_copy = A.copy()
# i = 0
# while len(A_copy) > 0 and i < len(A_copy):
#     n1 = A_copy.pop(i)
#     n2 = A_copy.pop(i)
#     if(n1 % 7 == 0 and n2 % 17 != 0):
#         A_summ.append(sum([n1, n2]))
#     i += 1
#
# print(min(A_summ))


#65)	(Е. Джобс) Рассматривается множество целых чисел, принадлежащих числовому
# отрезку [8800; 55535], которые удовлетворяют следующим условиям:
# а) произведение разрядов больше 35;
# б) хотя бы один из разрядов равен 7.
# Найдите наибольшее из таких чисел и их количество.

# list=[i for i in range (8800, 55536)]
# new_list=[]
#
# for x in list:
#     mult = 1
#     flag = False
#     for i in str(x):
#         mult *= int(i)
#         if int(i) == 7:
#             flag = True
#     if mult > 35 and flag == True:
#         new_list.append(x)
#
# print(new_list)
# print(new_list[12])
# print(max(new_list))
# print(len(new_list))


    # number = x
    # mult1 = 1
    # while number > 0:
    #     mult1 *= number % 10
    #     number //= 10
    # print(mult1)


# 85)	Назовём натуральное число подходящим, если ровно два из его делителей входят
# в список (7, 11, 17, 19). Найдите все подходящие числа,
# принадлежащих отрезку [15 000; 25 000]
# В ответе запишите два целых числа: сначала количество, затем наибольшее число.

# list=[i for i in range (15000, 25001)]
# new_list=[]
# for x in list:
#     if (x%7==0 and x%11==0) or \
#             (x%19==0 and x % 17==0) or \
#             (x%7==0 and x%17==0) or \
#             (x%7==0 and x%19==0) or (x%11==0 and x%19==0) or (x%11==0 and x%17==0):
#         new_list.append(x)
# print (len(new_list))
# print (min(new_list))


# list_nums_1 = list(map(function, list_nums))
# print(list_nums_1)

# 151)	(В. Шубинкин) В файле 17-1.txt содержится последовательность целых чисел.
# Элементы последовательности могут принимать целые значения от -10 000 до 10 000
# включительно. Определите и запишите в ответе сначала количество пар элементов
# последовательности, в которых хотя бы одно число оканчивается на 6 и делится на 3.
# Затем - минимальное число в паре среди всех таких пар. В данной задаче под парой
# подразумевается два идущих подряд элемента последовательности. Например, для
# последовательности 306; 36; -15; -6; 2; 16 ответом будет пара чисел: 4 и -15.

#my_dict = {'Masha' : "85625", 'Petya' : '56376847'}

#print(my_dict)

# def function(number):
#     if abs(number) % 10 == 6 and abs(number) % 3 == 0:
#         return True
#     return False
#
# list_nums = []
#
# with open('17-1.txt','r') as file:
#      for line in file:
#          list_nums.append(int(line))
#
# print(list_nums)
#
# for i in range(1, len(list_nums)):
#     left = list_nums[i - 1]
#     right = list_nums[i]